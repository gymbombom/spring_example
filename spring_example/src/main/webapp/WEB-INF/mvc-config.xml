<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

    <!-- Uncomment and your base-package here: 
         <context:component-scan
            base-package="org.springframework.samples.web"/>  -->
	
<!-- 	빈으로 등록 될 준비를 마친 클래스들을 스캔하여, 자동으로 빈으로 등록해준다. -->
<!-- 	@Controller, @Service, @Component, @Repository 어노테이션을 붙인 -->
<!--     클래스들이 빈으로 등록된다.  -->
 	<context:component-scan base-package="kr.co.example" />
    
    <mvc:annotation-driven />
    
<!--     ApplicationContext 안에 이미 등록된 bean들의 Annotation을 활성화 하기 위해 사용된다. -->
<!--     bean들이 XML로 등록됐는지 혹은 패키지 스캐닝을 통해 등록됐는지는 중요하지 않다. -->
<!--     이미 스프링 컨텍스트에 의해 생성되어 저장된 bean들에 대해서 @Autowired와 @Qualifier Annotation을 인식할 수 있다. -->
<!--     context:component-scan 을 설정했다면 아래 설정은 필요하지 않다. -->
<!--     <context:annotation-config/> -->

    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    	<property name="maxUploadSize" value="200000000" />
    	<property name="maxInMemorySize" value="200000000" />
	</bean>
    

	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	        <!-- Example: a logical view name of 'showMessage' is mapped to '/WEB-INF/jsp/showMessage.jsp' -->
	        <property name="prefix" value="/WEB-INF/view/"/>
	        <property name="suffix" value=".jsp"/>
	</bean>

</beans>
